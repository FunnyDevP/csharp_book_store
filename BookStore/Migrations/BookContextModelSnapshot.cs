// <auto-generated />
using System;
using BookStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BookStore.Migrations
{
    [DbContext(typeof(BookContext))]
    partial class BookContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BookStore.Models.BookCategoryModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("book_categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b3d9e7a8-3c31-4aed-9984-c65c14ef0795"),
                            CreatedAt = new DateTime(2021, 11, 28, 18, 0, 19, 994, DateTimeKind.Local).AddTicks(3890),
                            Name = "Data"
                        },
                        new
                        {
                            Id = new Guid("b3ce1341-d10c-429f-954b-854f55aef90b"),
                            CreatedAt = new DateTime(2021, 11, 28, 18, 0, 20, 1, DateTimeKind.Local).AddTicks(6360),
                            Name = "Development"
                        },
                        new
                        {
                            Id = new Guid("d6b1de80-e44e-412e-957e-8a7e64d494f9"),
                            CreatedAt = new DateTime(2021, 11, 28, 18, 0, 20, 1, DateTimeKind.Local).AddTicks(6380),
                            Name = "General"
                        });
                });

            modelBuilder.Entity("BookStore.Models.BookModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("author");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("405f49b6-e570-4081-8c51-861dd6bfac65"),
                            Author = "Ekaterina Kochmar",
                            CategoryId = new Guid("b3d9e7a8-3c31-4aed-9984-c65c14ef0795"),
                            CreatedAt = new DateTime(2021, 11, 28, 18, 0, 20, 3, DateTimeKind.Local).AddTicks(970),
                            Name = "Getting Started with Natural Language Processing",
                            Price = 19.99m
                        },
                        new
                        {
                            Id = new Guid("d8fef357-4b1c-4bda-adde-9d14a0cefafa"),
                            Author = "Edward Raff",
                            CategoryId = new Guid("b3d9e7a8-3c31-4aed-9984-c65c14ef0795"),
                            CreatedAt = new DateTime(2021, 11, 28, 18, 0, 20, 3, DateTimeKind.Local).AddTicks(1450),
                            Name = "Inside Deep Learning",
                            Price = 19.99m
                        },
                        new
                        {
                            Id = new Guid("8ff7a7b4-ed32-4e56-90a2-e6ca3148fc48"),
                            Author = "Michał Płachta",
                            CategoryId = new Guid("b3ce1341-d10c-429f-954b-854f55aef90b"),
                            CreatedAt = new DateTime(2021, 11, 28, 18, 0, 20, 3, DateTimeKind.Local).AddTicks(1460),
                            Name = "Grokking Functional Programming",
                            Price = 28.79m
                        },
                        new
                        {
                            Id = new Guid("87c7ebb8-a15f-404e-9011-407e6966d894"),
                            Author = "Alexander Granin",
                            CategoryId = new Guid("b3ce1341-d10c-429f-954b-854f55aef90b"),
                            CreatedAt = new DateTime(2021, 11, 28, 18, 0, 20, 3, DateTimeKind.Local).AddTicks(1470),
                            Name = "Functional Design and Architecture",
                            Price = 28.79m
                        },
                        new
                        {
                            Id = new Guid("f9b7ff9d-5699-4b4a-95cc-c50e701c0b5a"),
                            Author = "Thomas Kranz",
                            CategoryId = new Guid("d6b1de80-e44e-412e-957e-8a7e64d494f9"),
                            CreatedAt = new DateTime(2021, 11, 28, 18, 0, 20, 3, DateTimeKind.Local).AddTicks(1470),
                            Name = "Making Sense of Cyber Security",
                            Price = 28.79m
                        },
                        new
                        {
                            Id = new Guid("e49ad4e4-98c9-4f0a-adc0-0b3dc585c243"),
                            Author = "Oleksandr Kaleniuk",
                            CategoryId = new Guid("d6b1de80-e44e-412e-957e-8a7e64d494f9"),
                            CreatedAt = new DateTime(2021, 11, 28, 18, 0, 20, 3, DateTimeKind.Local).AddTicks(1480),
                            Name = "Geometry for Programmers",
                            Price = 28.79m
                        });
                });

            modelBuilder.Entity("BookStore.Models.BookModel", b =>
                {
                    b.HasOne("BookStore.Models.BookCategoryModel", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
