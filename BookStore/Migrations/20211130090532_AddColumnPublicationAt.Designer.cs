// <auto-generated />
using System;
using BookStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BookStore.Migrations
{
    [DbContext(typeof(BookContext))]
    [Migration("20211130090532_AddColumnPublicationAt")]
    partial class AddColumnPublicationAt
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BookStore.Models.BookCategoryModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("book_categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b3d9e7a8-3c31-4aed-9984-c65c14ef0795"),
                            CreatedAt = new DateTime(2021, 11, 30, 16, 5, 32, 186, DateTimeKind.Local).AddTicks(5490),
                            Name = "Data"
                        },
                        new
                        {
                            Id = new Guid("b3ce1341-d10c-429f-954b-854f55aef90b"),
                            CreatedAt = new DateTime(2021, 11, 30, 16, 5, 32, 204, DateTimeKind.Local).AddTicks(9190),
                            Name = "Development"
                        },
                        new
                        {
                            Id = new Guid("d6b1de80-e44e-412e-957e-8a7e64d494f9"),
                            CreatedAt = new DateTime(2021, 11, 30, 16, 5, 32, 204, DateTimeKind.Local).AddTicks(9210),
                            Name = "General"
                        });
                });

            modelBuilder.Entity("BookStore.Models.BookModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("author");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.Property<DateTime>("PublicationAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("publication_at");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("97ce480c-5e2c-4ac3-a1c1-0310813e416c"),
                            Author = "Ekaterina Kochmar",
                            CategoryId = new Guid("b3d9e7a8-3c31-4aed-9984-c65c14ef0795"),
                            CreatedAt = new DateTime(2021, 11, 30, 16, 5, 32, 206, DateTimeKind.Local).AddTicks(3100),
                            Name = "Getting Started with Natural Language Processing",
                            Price = 19.99m,
                            PublicationAt = new DateTime(2021, 12, 30, 16, 5, 32, 206, DateTimeKind.Local).AddTicks(2650)
                        },
                        new
                        {
                            Id = new Guid("fa4e1250-bcfd-4b88-b6b3-0fb50b665771"),
                            Author = "Edward Raff",
                            CategoryId = new Guid("b3d9e7a8-3c31-4aed-9984-c65c14ef0795"),
                            CreatedAt = new DateTime(2021, 11, 30, 16, 5, 32, 206, DateTimeKind.Local).AddTicks(3550),
                            Name = "Inside Deep Learning",
                            Price = 19.99m,
                            PublicationAt = new DateTime(2022, 1, 30, 16, 5, 32, 206, DateTimeKind.Local).AddTicks(3530)
                        },
                        new
                        {
                            Id = new Guid("c1896798-5c34-4343-a5af-8b0eff2371a3"),
                            Author = "Michał Płachta",
                            CategoryId = new Guid("b3ce1341-d10c-429f-954b-854f55aef90b"),
                            CreatedAt = new DateTime(2021, 11, 30, 16, 5, 32, 206, DateTimeKind.Local).AddTicks(3610),
                            Name = "Grokking Functional Programming",
                            Price = 28.79m,
                            PublicationAt = new DateTime(2022, 2, 28, 16, 5, 32, 206, DateTimeKind.Local).AddTicks(3610)
                        },
                        new
                        {
                            Id = new Guid("5c750f6a-abc0-409d-9109-526ba60a8ad5"),
                            Author = "Alexander Granin",
                            CategoryId = new Guid("b3ce1341-d10c-429f-954b-854f55aef90b"),
                            CreatedAt = new DateTime(2021, 11, 30, 16, 5, 32, 206, DateTimeKind.Local).AddTicks(3620),
                            Name = "Functional Design and Architecture",
                            Price = 28.79m,
                            PublicationAt = new DateTime(2022, 3, 30, 16, 5, 32, 206, DateTimeKind.Local).AddTicks(3610)
                        },
                        new
                        {
                            Id = new Guid("c018717b-167e-4058-a874-6143c22199e6"),
                            Author = "Thomas Kranz",
                            CategoryId = new Guid("d6b1de80-e44e-412e-957e-8a7e64d494f9"),
                            CreatedAt = new DateTime(2021, 11, 30, 16, 5, 32, 206, DateTimeKind.Local).AddTicks(3620),
                            Name = "Making Sense of Cyber Security",
                            Price = 28.79m,
                            PublicationAt = new DateTime(2022, 4, 30, 16, 5, 32, 206, DateTimeKind.Local).AddTicks(3620)
                        },
                        new
                        {
                            Id = new Guid("e2f3075b-1f76-412d-9e8a-5efa1dd1461b"),
                            Author = "Oleksandr Kaleniuk",
                            CategoryId = new Guid("d6b1de80-e44e-412e-957e-8a7e64d494f9"),
                            CreatedAt = new DateTime(2021, 11, 30, 16, 5, 32, 206, DateTimeKind.Local).AddTicks(3630),
                            Name = "Geometry for Programmers",
                            Price = 28.79m,
                            PublicationAt = new DateTime(2022, 5, 30, 16, 5, 32, 206, DateTimeKind.Local).AddTicks(3630)
                        });
                });

            modelBuilder.Entity("BookStore.Models.BookModel", b =>
                {
                    b.HasOne("BookStore.Models.BookCategoryModel", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
